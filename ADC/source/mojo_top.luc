module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy       // AVR RX buffer full
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst){
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr;
      
      pwm pwm[8]; // PWM modules for the LEDs
      dff channel_ctr[3];
    }
  }
  
  sig real_channel[4];
  sig sample_channel[3];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    real_channel = channel_ctr.q > 1 ? channel_ctr.q + 2 : channel_ctr.q;
    sample_channel = avr.sample_channel > 1 ? avr.sample_channel - 2 : avr.sample_channel;
    
    if (avr.new_sample && sample_channel == channel_ctr.q)
      channel_ctr.d = channel_ctr.q + 1;
    
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.channel = real_channel; // ADC set to channel 0
    avr.tx_block = avr_rx_busy; // block TX when AVR is busy
    
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    
    // unused serial port
    avr.tx_data = 8hxx;  // don't care
    avr.new_tx_data = 0; // no data
    
    pwm.update = 8h00;       // default values
    pwm.value = 8x{{8hxx}};
    
    pwm.update[sample_channel] = avr.new_sample; // update when we have a new sample
    pwm.value[sample_channel] = avr.sample[9:2]; // use the 8 MSBs
    
    led = pwm.pulse;         // connect PWM output to all the LEDs 
  }
}